openapi: "3.0.0"
info:
  version: 1.0.0
  title: LVH - Naheulbeuk
  license:
    name: MIT
servers:
  - url: https://lvh-naheulbeuk.herokuapp.com/
paths:
  /user:
    get:
      summary: Get Current user
      tags:
        - user
      parameters:
        - name: Authorization
          in: header
          description: Authentication Token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The current user
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UserResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Create a user
      tags:
        - user
      requestBody:
          description: User object
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The current user
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UserResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/{id}:
    get:
      summary: Get Current user
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: Id of the searched user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The current user
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UserResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /story:
    get:
      summary: Get all current user's stories
      tags:
        - story
      parameters:
        - name: Authorization
          in: header
          description: Authentication Token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of story written by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Story'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Add a new story
      tags:
        - story
      parameters:
        - name: Authorization
          in: header
          description: Authentication Token
          required: true
          schema:
            type: string
      requestBody:
          description: The story object
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
      responses:
        '200':
          description: The given story
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StoryResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /story/all:
    get:
      summary: Get all stories
      tags:
        - story
      responses:
        '200':
          description: A list of stories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Story'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse" 
  /story/{userId}:
    get:
      summary: Stories of a given user
      tags:
        - story
      parameters:
        - name: userId
          in: path
          description: Id of the searched user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The given story
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Story'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /story/{id}:
    delete:
      summary: Delete a story
      tags:
        - story
      parameters:
        - name: id
          in: path
          description: Id of the searched story
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Authentication Token
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /perso:
    get:
      summary: Get list of user's character
      tags:
        - perso
      parameters:
        - name: Authorization
          in: header
          description: Authentication Token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of characters created by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Add a character
      tags:
        - perso
      parameters:
        - name: Authorization
          in: header
          description: Authentication Token
          required: true
          schema:
            type: string
      requestBody:
          description: The perso object
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
      responses:
        '200':
          description: The given character
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CharacterResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /perso/{id}:
    get:
      summary: get a perso
      tags:
        - perso
      parameters:
        - name: id
          in: path
          description: Id of the searched character
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The given character
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CharacterResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: delete a perso
      tags:
        - perso
      parameters:
        - name: id
          in: path
          description: Id of the searched character
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /perso/{persoId}/eat:
    post:
      summary: make a perso eat
      tags:
        - perso
      parameters:
        - name: persoId
          in: path
          description: Id of the searched character
          required: true
          schema:
            type: string
      requestBody:
          description: The food id (json)
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
      responses:
        '200':
          description: The updated perso and page
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdventureResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /page:
    put:
      summary: Add a new page to a story
      tags:
        - page
      parameters:
        - name: Authorization
          in: header
          description: Authentication Token
          required: true
          schema:
            type: string
      requestBody:
          description: The page object
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
      responses:
        '200':
          description: The given page
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/PageResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /page/{id}:
    get:
      summary: get a page
      tags:
        - page
      parameters:
        - name: id
          in: path
          description: Id of the searched page
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Authentication Token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The searched page
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/PageResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a page
      tags:
        - page
      parameters:
        - name: id
          in: path
          description: Id of the searched page
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /page/story/{id}:
    get:
      summary: get the first page of a story
      tags:
        - page
      parameters:
        - name: id
          in: path
          description: Id of the searched sotry
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The searched page
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/AdventureResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /adventure/changePage:
    post:
      summary: character goes to another page
      tags:
        - adventure
      parameters:
        - name: Authorization
          in: header
          description: Authentication Token
          required: true
          schema:
            type: string
      requestBody:
          description: The choice made by the user
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Choice'
      responses:
        '200':
          description: The searched page
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/AdventureResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /adventure/{persoId}:
    get:
      summary: get the page and character with persoId (when reload app)
      tags:
        - adventure
      parameters:
        - name: persoId
          in: path
          description: Id of the searched character
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The searched page and character
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/AdventureResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /adventure/test:
    post:
      summary: take a test for the perso
      tags:
        - adventure
      parameters:
        - name: Authorization
          in: header
          description: Authentication Token
          required: true
          schema:
            type: string
      requestBody:
          description: The result test
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestInput'
      responses:
        '200':
          description: The new state of perso and page
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/AdventureResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  
  /store:
    put:
      summary: create a store
      tags:
        - store
      parameters:
        - name: Authorization
          in: header
          description: Authentication Token
          required: true
          schema:
            type: string
      requestBody:
          description: The store to create
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
      responses:
        '200':
          description: The new store created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Store'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /store/{id}:
    get:
      summary: get a store
      tags:
        - store
      parameters:
        - name: Authorization
          in: header
          description: Authentication Token
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Id of the searched store
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The store searched
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Store'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /store/all:
    get:
      summary: get all stores
      tags:
        - store
      parameters:
        - name: Authorization
          in: header
          description: Authentication Token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: All stores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    User:
      required:
        - token
        - givenName
      properties:
        token:
          type: string
        givenName:
          type: string
        avatarUri:
          type: string
    UserResponse:
      properties:
        page:
          $ref: "#/components/schemas/User"
    Story:
      required:
        - name
        - rangeLevel
      properties:
        userId:
          type: string
        name:
          type: string
        description:
          type: string
        rangeLevel:
          type: string
        adminApproved:
          type: boolean
        creationDate:
          type: string
        lastUpdateDate:
          type: string
        approvedDate:
          type: string
        likes:
          type: integer
        dislikes:
          type: integer
        imageUri:
          type: string
    StoryResponse:
      properties:
        page:
          $ref: "#/components/schemas/Story"
    Character:
      required:
        - name
        - race
        - job
        - gender
      properties:
        id:
          type: string
        name:
          type: string
        race:
          type: string
        job:
          type: string
        destinyPoint:
          type: integer
        level:
          type: integer
        xp:
          type: integer
        gender:
          type: string
        courage:
          type: integer
        intelligence:
          type: integer
        charisma:
          type: integer
        dexterity:
          type: integer
        strength:
          type: integer
        vitality:
          type: integer
        vilatityMax:
          type: integer
        attack:
          type: integer
        parry:
          type: integer
        protection:
          type: integer
        money:
          type: integer
        magicProtection:
          type: integer
        maxWeight:
          type: integer
        pageId:
          type: string
        onOfficalMission:
          type: boolean
        creationDate:
          type: string
        userId:
          type: string
        objects:
          type: array
          items:
            type: object
        fight:
          type: object
        companions:
          type: array
          items:
            type: object
    
    CharacterResponse:
      properties:
        perso:
          $ref: "#/components/schemas/Character"
    
    Page:
      required:
        - storyId
        - pageNumber
        - text
        - entryPoint
      properties:
        storyId:
          type: string
        pageNumber:
          type: string
        imageUri:
          type: string
        entryPoint:
          description: Is the current page the first page of the story
          type: boolean
        fight:
          $ref: "#/components/schemas/Fight"
        text:
          type: string
        actions:
          type: array
          description: Only when writing (not shown in get pages)
          items:
            type: object
        storeId:
          type: string
          description: If the user wants to buy something this is the id to used to get the store (store api)
        tests:
          type: array
          description: Should be used when tests results are needed or if the test has actions linked
          items:
            $ref: "#/components/schemas/Test"
        pageAccess:
          type: array
          items:
            $ref: "#/components/schemas/PageAccess"
    
    PageAccess:
      properties:
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/Condition"
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
        targetPageNumber:
          type: string
          description: the pageNumber used to changePage (adventureAPI)
        input:
          type: boolean
          description: if true, the targetPageNumber should not be displayed and the user must enter the correct answer
        correctInput:
          type: string
          description: write page only, used for user input comparision
        unAccessible:
          type: boolean
          description: if true the page cannot be accessible by the character (if character changes, pageAccess must be updated from the response)
    
    Condition:
      properties:
        conditionApply:
          type: string
          description: AND,	OR. used for list of conditions to know if all of them should be valid or just one of them.
        conditionType:
          type: string
          description: TEST, CARACT, FIGHTRESULT, OBJECT, COMPETENCE
        caractCondition:
          $ref: "#/components/schemas/CaractCondition"
        competence:
          type: string
        fightCondition:
           $ref: "#/components/schemas/FightCondition"
        testCondition:
          $ref: "#/components/schemas/TestCondition"
        object:
          $ref: "#/components/schemas/Object"
        inverseCondition:
          type: boolean
          description: if true, the condition should not be true to be valid
    
    FightCondition:
      properties:
        combatPassed:
          type: boolean
          description: true, combat passed, false, combat failed, null no combat required
        hasKilled:
          type: boolean
        combatAvoided:
          type: boolean
          
    TestCondition:
      properties:
        testPassed:
          type: boolean
          description: true, test passed, false, test failed, null no test required
        testName:
          type: string
        testResultHigherThan:
          type: integer
        testResultLowerThan:
          type: integer
          
    CaractCondition:
      properties:
        caract:
          type: string
        caractLogic:
          type: string
          description: LESS_THAN,	LESS_OR_EQUALS_THAN,	MORE_THAN,	MORE_OR_EQUALS_THAN,	EQUALS
        points:
          type: integer
          description: value to compare the character's caract to
        caractValue:
          type: string

    Choice:
      required:
        - persoId
      properties:
        persoId:
          type: string
        targetPageNumberId:
          type: string
          description: to change page (if not null, targetStoryId will not be used)
        targetStoryId:
          type: string
          description: used if the perso has no currentPage
        input:
          description: If the access page requires an input, this is the user response
          type: string
    Fight:
      properties:
        roundMax:
          type: integer
          description: number of round before the combat should stop
        pvMin:
          type: integer
          description: The pv below which the character should be to considered the fight as done (and lost)
        enemyPvMin:
          type: integer
          description: The pv below which the enemies should be to considered the fight as done (and won)
        mandatory:
          type: boolean
          description: if the fight can be avoided (user choice)
        contactEnemy:
          type: array
          items:
            $ref: "#/components/schemas/Character"
        distanceEnemy:
          type: array
          description: Become contact enemy if there is no contact enemies
          items:
            $ref: "#/components/schemas/Character"
    Test:
      properties:
        name:
          type: string
          description: used in condition to know which test to use
        caract:
          type: string
          description: test is based on this character caract if not null
        plainModificator:
          type: integer
          description: if not null, used to apply bonus or malus according to the a character caract
        basedModificatorCaract:
          type: string
          description: caract used to apply bonus or malus to the test
        caractBasedModificator:
          type: integer
          description: of every point away from fromeDefinedPoint, multiply the bonus or malus to this number
        fromDefinedPoint:
          type: integer
          description: number used as ref when comparing character's caract
        ignoreLowerPoints:
          type: integer
          description: when using comparison, can be used to ignore some level of caract
        doLessThan:
          type: integer
          description: read only, is not null the test should be under that to pass
        maxNumberDice:
          type: integer
          description: the max number the dice used for the test should have. if null it is 20
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
        specificBonusToUse:
    	  items:
            $ref: "#/components/schemas/Temporary"
    Action:
      properties:
        actionType:
          type: string
          description: MODIFY_D20_CARACT, MODIFY_CARACT, ADD_OBJECT, ADD_FOOD, REMOVE_FOOD, ADD_COMPANION, REMOVE_COMPANION, REMOVE_OBJECT, ADD_TEMPORARY, REMOVE_TEMPORARY, END
        quantity:
          type: integer
        d6Quantity:
          type: integer
          description: if the quantity should be set according to a dice
        d20Quantity:
          type: integer
          description: if the quantity should be set according to a dice
        object:
          items:
            $ref: "#/components/schemas/Object"
        food:
          items:
            $ref: "#/components/schemas/Food"
        temporary:
          items:
            $ref: "#/components/schemas/Temporary"
        caract:
          type: string
        companion:
          items:
            $ref: "#/components/schemas/Character"
        conditions:
          type: array
          items:
            type: object
    Temporary:
      properties:
        id:
          type: string
        name:
          type: string
        bonus:
          items:
            $ref: "#/components/schemas/Equipement"
        creationDate:
          type: string
        length:
          type: integer
          description: number of seconds the temporary can be used
        specificUse:
          type: boolean
          description: if true, this temporary will only be used when tests refers to it specifically
    Object:
      properties:
        id:
          type: string
        localisation:
          type: string
          description: BAG,	BODY,	SAFE,	STORE
        equipement:
          items:
            $ref: "#/components/schemas/Equipement"
        questObject:
          type: boolean
        weight:
          type: integer
          description: in gramms  
        imageUri:
        	type: string
    Equipement:
      properties:
        name:
          type: string
        type:
          type: string
          description: SHIELD, CONTACT_WEAPON, DISTANCE_WEAPON, MAGIC_WEAPON, HEAD_PROTECTION, FOOT_PROTECTION, ARM_PROTECTION, TORAX_PROTECTION, FULL_PROTECTION, JEWLERY, RELIC
        courage:
          type: integer
        intelligence:
          type: integer
        charisma:
          type: integer
        dexterity:
          type: integer
        strength:
          type: integer
        attack:
          type: integer
        parry:
          type: integer
        protection:
          type: integer
        sellingPrice:
          type: integer
        buyingPrice:
          type: integer
        attackDie:
          type: integer
        additionalDamage:
          type: integer
        projectiles:
          type: integer
        rechargeTime:
          type: integer
    Food:
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
        dayLength:
          type: integer
        portions:
          type: integer
        buyingPrice:
          type: integer
        sellingPrice:
          type: integer
        creationDate:
          type: string
        temporary:
          type: object
    Store:
      required:
        - name
      properties:
        id:
          type: string
        name:
          type: string
        equipements:
          type: array
          items:
            type: object
        food:
          type: array
          items:
            type: object
    TestInput:
      required:
        - persoId
      properties:
        persoId:
          type: string
        testName:
          type: string
        testResult:
          type: string
    PageResponse:
      properties:
        page:
          $ref: "#/components/schemas/Page"
    AdventureResponse:
      properties:
        page:
          $ref: "#/components/schemas/Page"
        perso:
          $ref: "#/components/schemas/Character"
    ErrorResponse:
      properties:
        error:
          $ref: "#/components/schemas/Error"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

